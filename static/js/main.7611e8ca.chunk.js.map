{"version":3,"sources":["serviceWorker.js","actions/actions.js","Components/List.jsx","actions/constants.js","Components/form.jsx","actions/utility.js","Components/Header.jsx","Components/todoForm.jsx","Components/Main.jsx","reducers/addRem.js","reducers/todoGetter.js","reducers/index.js","index.js"],"names":["Boolean","window","location","hostname","match","add","todo","type","payload","entry","categ","connect","todos","dispatch","get","getTodo","props","className","style","name","filter","item","map","i","key","data-toggle","data-target","onClick","TODO_TYPES","state","useState","input","setInp","opt","setOpt","useEffect","length","localStorage","setItem","JSON","stringify","id","role","tabIndex","onSubmit","event","preventDefault","undefined","find","handleSubmit","placeholder","onChange","target","value","data-dismiss","Header","addTodo","removeTodo","setCateg","aria-labelledby","aria-hidden","clear","getLoc","parse","getItem","initialState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","logger","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCVOC,EAAM,SAACC,EAAMC,GACtB,MAAO,CACHA,KATgB,WAUhBC,QAAS,CACLC,MAAOH,EACPI,MAAOH,KCYnB,IAYeI,eAZS,SAAC,GACrB,MAAO,CACHC,MAF+B,EAAZA,UAMA,SAAAC,GACvB,MAAO,CACHC,IAAK,SAACL,EAAOC,GAAR,OAAkBG,EDRR,SAACJ,EAAOC,GAC3B,MAAO,CACHH,KAxBgB,WAyBhBC,QAAS,CACLC,MAAOA,EACPC,MAAOA,ICGqBK,CAAQN,EAAOC,QAIxCC,EAhCf,SAAcK,GAEV,OACI,yBAAKC,UAAU,sCAAsCC,MAAO,CAAE,MAAS,QAAS,OAAU,OAAQ,UAAa,UAC3G,yBAAKD,UAAU,kDACVD,EAAMG,MAEVH,EAAMJ,MAAMQ,QAAO,SAAAC,GAAI,OAAIA,EAAKX,QAAUM,EAAMT,QAC5Ce,KAAI,SAACD,EAAME,GAAP,OACD,4BAAQC,IAAKD,EACbE,cAAY,QAAQC,cAAY,YAChCC,QAAS,kBAAMX,EAAMF,IAAIO,EAAKZ,MAAOY,EAAKX,QACtCO,UAAU,0CAETI,EAAKZ,c,OCnBjBmB,EACA,UADAA,EAEK,eAFLA,EAGA,UAHAA,EAIE,YCuDf,IAYejB,eAZS,SAAAkB,GACpB,MAAO,CACHjB,MAAOiB,EAAMjB,UAIM,SAAAC,GACvB,MAAO,CACHR,IAAK,SAACgB,EAAMd,GAAP,OAAgBM,EAASR,EAAIgB,EAAMd,QAIjCI,EAhEf,SAAcK,GAAQ,IAAD,EACOc,mBAAS,IADhB,mBACVC,EADU,KACHC,EADG,OAEKF,mBAASF,GAFd,mBAEVK,EAFU,KAELC,EAFK,KAejB,OAZAC,qBAAU,WCVU,IAACvB,EDWbI,EAAMJ,MAAMwB,OAAS,ICXRxB,EDYJI,EAAMJ,MCXvByB,aAAaC,QAAQ,QAASC,KAAKC,UAAU5B,ODa1C,CAACI,IASA,yBAAKC,UAAU,QAAQwB,GAAG,cAAcC,KAAK,UACzC,yBAAKzB,UAAU,iCAAiCC,MAAO,CAAE,OAAU,SAC/D,0BACID,UAAU,gBACV0B,SAAS,KAAKD,KAAK,SACnBE,SAAU,SAACC,GAAD,OAZL,SAACA,GAClBA,EAAMC,iBACFf,EAAMK,OAAS,QAAwDW,IAAnD/B,EAAMJ,MAAMoC,MAAK,SAAA3B,GAAI,OAAIA,EAAKZ,QAAUsB,MAC5Df,EAAMX,IAAI0B,EAAOE,GASYgB,CAAaJ,KAElC,yBAAK5B,UAAU,gBACX,wBAAIA,UAAU,eAAd,oBAEJ,yBAAKA,UAAU,cACX,2BAAOV,KAAK,OACRU,UAAU,eACVC,MAAO,CAAE,aAAgB,OACzBuB,GAAG,YACHS,YAAY,yBACZC,SAAU,SAACN,GAAD,OAAWb,EAAOa,EAAMO,OAAOC,UAG7C,4BAAQpC,UAAU,eAAewB,GAAG,WAAWU,SAAU,SAACN,GAAD,OAAWX,EAAOW,EAAMO,OAAOC,SACpF,4BAAQA,MAAOzB,GAAf,WACA,4BAAQyB,MAAOzB,GAAf,gBACA,4BAAQyB,MAAOzB,GAAf,WACA,4BAAQyB,MAAOzB,GAAf,eAGR,yBAAKX,UAAU,gBACX,4BAAQA,UAAU,kBAAkBV,KAAK,UAAzC,kBACA,4BAAQA,KAAK,SAASU,UAAU,oBAAoBqC,eAAa,SAAjE,gBEjDjB,SAASC,IACZ,OACI,yBAAKtC,UAAU,oDACX,wBAAIA,UAAU,cAAd,wBAGD,4BAAQV,KAAK,SAASU,UAAU,wBAAyBQ,cAAY,QAAQC,cAAY,gBAAzF,oBCgDX,IAcef,eAdS,SAAAkB,GACpB,MAAO,CACHvB,KAAMuB,EAAMvB,KACZM,MAAOiB,EAAMjB,UAIM,SAAAC,GACvB,MAAO,CACH2C,QAAS,SAAC/C,EAAOC,GAAR,OAAkBG,EAASR,EAAII,EAAOC,KAC/C+C,WAAY,SAAChD,GAAD,OAAWI,EN/CpB,CACHN,KAlBmB,cAmBnBC,QM6CuCC,QAIhCE,EAhEf,SAAkBK,GAAQ,IAAD,EACKc,mBAAS,IADd,mBACdpB,EADc,KACPgD,EADO,KAErB,OACI,6BACI,yBAAKzC,UAAU,QAAQwB,GAAG,WAAWE,SAAS,KAAKD,KAAK,SAASiB,kBAAgB,oBAAoBC,cAAY,QAC7G,yBAAK3C,UAAU,eAAeyB,KAAK,YAC/B,yBAAKzB,UAAU,iBACX,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,cAAcwB,GAAG,qBAA/B,sBAAuEzB,EAAMV,KAAKI,QAEtF,yBAAKO,UAAU,yBACVD,EAAMV,KAAKG,OAEhB,yBAAKQ,UAAU,gBACX,4BAAQA,UAAU,eAAewB,GAAG,WAAWU,SAAU,SAACN,GAAD,OAAWa,EAASb,EAAMO,OAAOC,SACtF,4BAAQA,MAAOzB,GAAf,WACA,4BAAQyB,MAAOzB,GAAf,gBACA,4BAAQyB,MAAOzB,GAAf,WACA,4BAAQyB,MAAOzB,GAAf,cAEJ,4BAAQX,UAAU,kBACdqC,eAAa,QACb3B,QAAS,WACLX,EAAMyC,WAAWzC,EAAMV,KAAKG,OAC5BO,EAAMwC,QAAQxC,EAAMV,KAAKG,MAAOC,KAJxC,WAUA,4BACIH,KAAK,SACLU,UAAU,iBACVU,QAAS,WACLX,EAAMyC,WAAWzC,EAAMV,KAAKG,OACF,IAAvBO,EAAMJ,MAAMwB,QAAcC,aAAawB,SAE9CP,eAAa,SAPjB,mBAWA,4BAAQ/C,KAAK,SAASU,UAAU,oBAAoBqC,eAAa,SAAjE,iBCZ5B,IAWe3C,eAXS,SAAAkB,GACpB,MAAO,CACHjB,MAAOiB,EAAMjB,UAIM,SAAAC,GACvB,MAAO,CACHiD,OAAQ,kBAAMjD,EPPX,CACHN,KAjCiB,YAkCjBC,QAAS+B,KAAKwB,MAAM1B,aAAa2B,QAAQ,gBOQlCrD,EApCf,SAAcK,GAKV,OAJAmB,qBAAU,WACFE,aAAa2B,QAAQ,UACrBhD,EAAM8C,WACX,IAEC,6BACI,kBAACP,EAAD,MACA,yBAAKd,GAAG,YAAYvB,MAAO,CACvB,QAAW,OACX,cAAiB,MACjB,eAAkB,SAClB,SAAY,SAEZ,kBAAC,EAAD,CAAMN,MAAOI,EAAMJ,MAAOL,KAAMqB,EAAoBT,KAAK,kBACzD,kBAAC,EAAD,CAAMP,MAAOI,EAAMJ,MAAOL,KAAMqB,EAAyBT,KAAK,sBAC9D,kBAAC,EAAD,CAAMP,MAAOI,EAAMJ,MAAOL,KAAMqB,EAAoBT,KAAK,kBACzD,kBAAC,EAAD,CAAMP,MAAOI,EAAMJ,MAAOL,KAAMqB,EAAsBT,KAAK,qBAE/D,kBAAC,EAAD,MACA,kBAAC,EAAD,U,eC3BN8C,EAAe,GCAfA,EAAe,CACjBxD,MAAO,GACPC,MAAO,ICDEwD,EAAcC,YAAgB,CACvCvD,MFAkB,WAAmC,IAAlCiB,EAAiC,uDAAzBoC,EAAcG,EAAW,uCACpD,OAAOA,EAAO7D,MACV,IRNgB,WQOhB,MAAM,GAAN,mBAAWsB,GAAX,CAAkBuC,EAAO5D,UAEzB,IRRmB,cQSnB,OAAOqB,EAAMT,QAAO,SAAAC,GAAI,OAAIA,EAAKZ,QAAU2D,EAAO5D,WAElD,IRTiB,YQUjB,OAAO,YAAI4D,EAAO5D,SAElB,QACI,OAAOqB,IEXfvB,KDEsB,WAAmC,IAAlCuB,EAAiC,uDAAzBoC,EAAcG,EAAW,uCACxD,OAAQA,EAAO7D,MACX,ITPgB,WSQb,MACI,CACIE,MAAO2D,EAAO5D,QAAQC,MACtBC,MAAO0D,EAAO5D,QAAQE,OAG7B,QACI,OAAOmB,M,iBEPjBwC,EAAQC,YAAYJ,EAAaK,YAAgBC,MAEvDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SZgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7611e8ca.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//action types\r\nexport const ADD_TODO = 'ADD_TODO'\r\nexport const REMOVE_TODO = 'REMOVE_TODO'\r\nexport const GET_TODO = 'GET_TODO'\r\nexport const GET_LOCAL = 'GET_LOCAL'\r\n\r\n//action creators\r\n\r\nexport const add = (todo, type) => {\r\n    return {\r\n        type: ADD_TODO,\r\n        payload: {\r\n            entry: todo,\r\n            categ: type\r\n        }\r\n    }\r\n}\r\n\r\nexport const remove = (todo) => {\r\n    return {\r\n        type: REMOVE_TODO,\r\n        payload: todo\r\n    }\r\n}\r\n\r\nexport const getTodo = (entry, categ) => {\r\n    return {\r\n        type: GET_TODO,\r\n        payload: {\r\n            entry: entry,\r\n            categ: categ,\r\n        }\r\n    }\r\n}\r\n\r\nexport const getLocal = () => {\r\n    return {\r\n        type: GET_LOCAL,\r\n        payload: JSON.parse(localStorage.getItem('todos'))\r\n    }\r\n}","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getTodo } from '../actions/actions'\r\n\r\n\r\nfunction List(props) {    \r\n\r\n    return (\r\n        <div className=\"list-group text-break overflow-auto\" style={{ \"width\": '400px', 'margin': '20px', 'maxHeight': '800px' }}>\r\n            <div className=\"list-group-item list-group-item-action active \">\r\n                {props.name}\r\n            </div>\r\n            {props.todos.filter(item => item.categ === props.type)\r\n                .map((item, i) =>\r\n                    <button key={i}\r\n                    data-toggle=\"modal\" data-target=\"#todoForm\"\r\n                    onClick={() => props.get(item.entry, item.categ)}\r\n                        className=\"list-group-item list-group-item-action\"\r\n                    >\r\n                        {item.entry}\r\n                    </button>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ todos }) => {\r\n    return {\r\n        todos: todos,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        get: (entry, categ) => dispatch(getTodo(entry, categ))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(List)\r\n","export const TODO_TYPES = {\r\n    PLANNED: 'Planned',\r\n    IN_THE_WORKS: 'In the works',\r\n    DROPPED: 'Dropped',\r\n    COMPLETED: 'Completed'\r\n}","import React, { useEffect } from 'react'\r\nimport { add } from './../actions/actions';\r\nimport { connect } from 'react-redux';\r\nimport { useState } from 'react';\r\nimport { TODO_TYPES } from './../actions/constants';\r\nimport { setLocal } from './../actions/utility';\r\n\r\nfunction Form(props) {\r\n    const [input, setInp] = useState('')\r\n    const [opt, setOpt] = useState(TODO_TYPES.PLANNED)\r\n    useEffect(() => {\r\n        if (props.todos.length > 0) {\r\n            setLocal(props.todos)\r\n        }            \r\n    }, [props])\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        if (input.length > 0 && props.todos.find(item => item.entry === input) === undefined)\r\n            props.add(input, opt)\r\n    }\r\n\r\n    return (\r\n        <div className='modal' id=\"addTodoForm\" role=\"dialog\">\r\n            <div className='modal-dialog-centered modal-sm' style={{ 'margin': 'auto' }}>\r\n                <form\r\n                    className=\"modal-content\"\r\n                    tabIndex=\"-1\" role=\"dialog\"\r\n                    onSubmit={(event) => handleSubmit(event)}\r\n                >\r\n                    <div className='modal-header'>\r\n                        <h4 className='modal-title'>Add stuff to do</h4>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            style={{ 'marginBottom': '5px' }}\r\n                            id=\"stuffToDo\"\r\n                            placeholder=\"ur to do goes here boi\"\r\n                            onChange={(event) => setInp(event.target.value)}\r\n                        >\r\n                        </input>\r\n                        <select className=\"form-control\" id=\"todoType\" onChange={(event) => setOpt(event.target.value)}>\r\n                            <option value={TODO_TYPES.PLANNED}>Planned</option>\r\n                            <option value={TODO_TYPES.IN_THE_WORKS}>In the works</option>\r\n                            <option value={TODO_TYPES.DROPPED}>Dropped</option>\r\n                            <option value={TODO_TYPES.COMPLETED}>Completed</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button className=\"btn btn-primary\" type='submit'>Submit ur todo</button>\r\n                        <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        todos: state.todos\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        add: (item, type) => dispatch(add(item, type)),        \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form)","export const setLocal = (todos) => {\r\n    localStorage.setItem('todos', JSON.stringify(todos))\r\n}","import React from 'react'\r\n\r\nexport function Header() {\r\n    return (\r\n        <div className=\"navbar navbar-dark bg-dark justify-space-between\">\r\n            <h3 className='text-light'>\r\n                Simple to do manager\r\n            </h3>\r\n           <button type=\"button\" className=\"btn btn-outline-light\"  data-toggle=\"modal\" data-target=\"#addTodoForm\">\r\n                Add stuff to do\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { remove, add } from './../actions/actions';\r\nimport { useState } from 'react';\r\nimport { TODO_TYPES } from '../actions/constants';\r\n\r\nfunction TodoForm(props) {\r\n    const [categ, setCateg] = useState('')\r\n    return (\r\n        <div>\r\n            <div className=\"modal\" id=\"todoForm\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"exampleModalLabel\">Activity category: {props.todo.categ}</h5>\r\n                        </div>\r\n                        <div className=\"modal-body text-break\">\r\n                            {props.todo.entry}\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <select className=\"form-control\" id=\"todoType\" onChange={(event) => setCateg(event.target.value)}>\r\n                                <option value={TODO_TYPES.PLANNED}>Planned</option>\r\n                                <option value={TODO_TYPES.IN_THE_WORKS}>In the works</option>\r\n                                <option value={TODO_TYPES.DROPPED}>Dropped</option>\r\n                                <option value={TODO_TYPES.COMPLETED}>Completed</option>\r\n                            </select>\r\n                            <button className=\"btn btn-primary\"\r\n                                data-dismiss=\"modal\"\r\n                                onClick={() => {\r\n                                    props.removeTodo(props.todo.entry);\r\n                                    props.addTodo(props.todo.entry, categ);\r\n                                   \r\n                                }}\r\n                            >\r\n                                Move to\r\n                            </button>\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"btn btn-danger\"\r\n                                onClick={() => {\r\n                                    props.removeTodo(props.todo.entry)\r\n                                    if(props.todos.length === 1) localStorage.clear()\r\n                                }}\r\n                                data-dismiss='modal'\r\n                            >\r\n                                Remove activity\r\n                            </button>\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        todo: state.todo,\r\n        todos: state.todos,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addTodo: (entry, categ) => dispatch(add(entry, categ)),\r\n        removeTodo: (entry) => dispatch(remove(entry))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoForm)\r\n","import React, { useEffect } from 'react'\r\nimport List from './List';\r\nimport Form from './form';\r\nimport { Header } from './Header';\r\nimport { connect } from 'react-redux';\r\nimport { TODO_TYPES } from './../actions/constants';\r\nimport TodoForm from './todoForm';\r\nimport { getLocal } from '../actions/actions';\r\n\r\n\r\nfunction Main(props) {\r\n    useEffect(() => {\r\n        if (localStorage.getItem('todos'))\r\n            props.getLoc()\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <div id='listGroup' style={{\r\n                'display': 'flex',\r\n                'flexDirection': 'row',\r\n                'justifyContent': 'center',\r\n                'flexWrap': 'wrap'\r\n            }}>\r\n                <List todos={props.todos} type={TODO_TYPES.PLANNED} name='Planned todos' />\r\n                <List todos={props.todos} type={TODO_TYPES.IN_THE_WORKS} name='Todos in the work' />\r\n                <List todos={props.todos} type={TODO_TYPES.DROPPED} name='Dropped todos' />\r\n                <List todos={props.todos} type={TODO_TYPES.COMPLETED} name='Completed todos' />\r\n            </div>\r\n            <Form />\r\n            <TodoForm />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        todos: state.todos\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getLoc: () => dispatch(getLocal())\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main)","import { ADD_TODO, REMOVE_TODO, GET_LOCAL } from \"../actions/actions\"\r\n\r\n\r\nconst initialState = []\r\n\r\nexport const addRem = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case(ADD_TODO):\r\n        return [...state, action.payload]\r\n\r\n        case(REMOVE_TODO):\r\n        return state.filter(item => item.entry !== action.payload)\r\n        \r\n        case(GET_LOCAL):\r\n        return [...action.payload]\r\n        \r\n        default:\r\n            return state\r\n    }\r\n\r\n}","\r\nimport { GET_TODO } from './../actions/actions';\r\n\r\nconst initialState = {\r\n    entry: '',\r\n    categ: ''\r\n}\r\n\r\nexport const todoGetter = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case (GET_TODO):\r\n           return (\r\n               {\r\n                   entry: action.payload.entry,\r\n                   categ: action.payload.categ\r\n               }\r\n           )\r\n            default:\r\n                return state\r\n\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport { addRem } from './addRem';\r\nimport { todoGetter } from './todoGetter';\r\n\r\nexport const rootReducer = combineReducers({\r\n    todos: addRem,\r\n    todo: todoGetter\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Main from './Components/Main';\nimport { createStore, applyMiddleware } from 'redux';\nimport { rootReducer } from './reducers/index';\nimport logger from 'redux-logger';\nimport { Provider } from 'react-redux';\n\n\nconst store = createStore(rootReducer, applyMiddleware(logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Main />      \n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}